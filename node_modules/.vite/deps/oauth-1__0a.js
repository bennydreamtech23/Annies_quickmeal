import {
  __commonJS
} from "./chunk-HYZYPRER.js";

// node_modules/oauth-1.0a/oauth-1.0a.js
var require_oauth_1_0a = __commonJS({
  "node_modules/oauth-1.0a/oauth-1.0a.js"(exports, module) {
    if (typeof module !== "undefined" && typeof exports !== "undefined") {
      module.exports = OAuth;
    }
    function OAuth(opts) {
      if (!(this instanceof OAuth)) {
        return new OAuth(opts);
      }
      if (!opts) {
        opts = {};
      }
      if (!opts.consumer) {
        throw new Error("consumer option is required");
      }
      this.consumer = opts.consumer;
      this.nonce_length = opts.nonce_length || 32;
      this.version = opts.version || "1.0";
      this.parameter_seperator = opts.parameter_seperator || ", ";
      this.realm = opts.realm;
      if (typeof opts.last_ampersand === "undefined") {
        this.last_ampersand = true;
      } else {
        this.last_ampersand = opts.last_ampersand;
      }
      this.signature_method = opts.signature_method || "PLAINTEXT";
      if (this.signature_method == "PLAINTEXT" && !opts.hash_function) {
        opts.hash_function = function(base_string, key) {
          return key;
        };
      }
      if (!opts.hash_function) {
        throw new Error("hash_function option is required");
      }
      this.hash_function = opts.hash_function;
      this.body_hash_function = opts.body_hash_function || this.hash_function;
    }
    OAuth.prototype.authorize = function(request, token) {
      var oauth_data = {
        oauth_consumer_key: this.consumer.key,
        oauth_nonce: this.getNonce(),
        oauth_signature_method: this.signature_method,
        oauth_timestamp: this.getTimeStamp(),
        oauth_version: this.version
      };
      if (!token) {
        token = {};
      }
      if (token.key !== void 0) {
        oauth_data.oauth_token = token.key;
      }
      if (!request.data) {
        request.data = {};
      }
      if (request.includeBodyHash) {
        oauth_data.oauth_body_hash = this.getBodyHash(request, token.secret);
      }
      oauth_data.oauth_signature = this.getSignature(request, token.secret, oauth_data);
      return oauth_data;
    };
    OAuth.prototype.getSignature = function(request, token_secret, oauth_data) {
      return this.hash_function(this.getBaseString(request, oauth_data), this.getSigningKey(token_secret));
    };
    OAuth.prototype.getBodyHash = function(request, token_secret) {
      var body = typeof request.data === "string" ? request.data : JSON.stringify(request.data);
      if (!this.body_hash_function) {
        throw new Error("body_hash_function option is required");
      }
      return this.body_hash_function(body, this.getSigningKey(token_secret));
    };
    OAuth.prototype.getBaseString = function(request, oauth_data) {
      return request.method.toUpperCase() + "&" + this.percentEncode(this.getBaseUrl(request.url)) + "&" + this.percentEncode(this.getParameterString(request, oauth_data));
    };
    OAuth.prototype.getParameterString = function(request, oauth_data) {
      var base_string_data;
      if (oauth_data.oauth_body_hash) {
        base_string_data = this.sortObject(this.percentEncodeData(this.mergeObject(oauth_data, this.deParamUrl(request.url))));
      } else {
        base_string_data = this.sortObject(this.percentEncodeData(this.mergeObject(oauth_data, this.mergeObject(request.data, this.deParamUrl(request.url)))));
      }
      var data_str = "";
      for (var i = 0; i < base_string_data.length; i++) {
        var key = base_string_data[i].key;
        var value = base_string_data[i].value;
        if (value && Array.isArray(value)) {
          value.sort();
          var valString = "";
          value.forEach(function(item, i2) {
            valString += key + "=" + item;
            if (i2 < value.length) {
              valString += "&";
            }
          }.bind(this));
          data_str += valString;
        } else {
          data_str += key + "=" + value + "&";
        }
      }
      data_str = data_str.substr(0, data_str.length - 1);
      return data_str;
    };
    OAuth.prototype.getSigningKey = function(token_secret) {
      token_secret = token_secret || "";
      if (!this.last_ampersand && !token_secret) {
        return this.percentEncode(this.consumer.secret);
      }
      return this.percentEncode(this.consumer.secret) + "&" + this.percentEncode(token_secret);
    };
    OAuth.prototype.getBaseUrl = function(url) {
      return url.split("?")[0];
    };
    OAuth.prototype.deParam = function(string) {
      var arr = string.split("&");
      var data = {};
      for (var i = 0; i < arr.length; i++) {
        var item = arr[i].split("=");
        item[1] = item[1] || "";
        if (data[item[0]]) {
          if (!Array.isArray(data[item[0]])) {
            data[item[0]] = [data[item[0]]];
          }
          data[item[0]].push(decodeURIComponent(item[1]));
        } else {
          data[item[0]] = decodeURIComponent(item[1]);
        }
      }
      return data;
    };
    OAuth.prototype.deParamUrl = function(url) {
      var tmp = url.split("?");
      if (tmp.length === 1)
        return {};
      return this.deParam(tmp[1]);
    };
    OAuth.prototype.percentEncode = function(str) {
      return encodeURIComponent(str).replace(/\!/g, "%21").replace(/\*/g, "%2A").replace(/\'/g, "%27").replace(/\(/g, "%28").replace(/\)/g, "%29");
    };
    OAuth.prototype.percentEncodeData = function(data) {
      var result = {};
      for (var key in data) {
        var value = data[key];
        if (value && Array.isArray(value)) {
          var newValue = [];
          value.forEach(function(val) {
            newValue.push(this.percentEncode(val));
          }.bind(this));
          value = newValue;
        } else {
          value = this.percentEncode(value);
        }
        result[this.percentEncode(key)] = value;
      }
      return result;
    };
    OAuth.prototype.toHeader = function(oauth_data) {
      var sorted = this.sortObject(oauth_data);
      var header_value = "OAuth ";
      if (this.realm) {
        header_value += 'realm="' + this.realm + '"' + this.parameter_seperator;
      }
      for (var i = 0; i < sorted.length; i++) {
        if (sorted[i].key.indexOf("oauth_") !== 0)
          continue;
        header_value += this.percentEncode(sorted[i].key) + '="' + this.percentEncode(sorted[i].value) + '"' + this.parameter_seperator;
      }
      return {
        Authorization: header_value.substr(0, header_value.length - this.parameter_seperator.length)
        //cut the last chars
      };
    };
    OAuth.prototype.getNonce = function() {
      var word_characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
      var result = "";
      for (var i = 0; i < this.nonce_length; i++) {
        result += word_characters[parseInt(Math.random() * word_characters.length, 10)];
      }
      return result;
    };
    OAuth.prototype.getTimeStamp = function() {
      return parseInt((/* @__PURE__ */ new Date()).getTime() / 1e3, 10);
    };
    OAuth.prototype.mergeObject = function(obj1, obj2) {
      obj1 = obj1 || {};
      obj2 = obj2 || {};
      var merged_obj = obj1;
      for (var key in obj2) {
        merged_obj[key] = obj2[key];
      }
      return merged_obj;
    };
    OAuth.prototype.sortObject = function(data) {
      var keys = Object.keys(data);
      var result = [];
      keys.sort();
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        result.push({
          key,
          value: data[key]
        });
      }
      return result;
    };
  }
});
export default require_oauth_1_0a();
//# sourceMappingURL=oauth-1__0a.js.map
